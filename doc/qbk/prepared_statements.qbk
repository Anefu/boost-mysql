[/
    Copyright (c) 2019-2021 Ruben Perez Hidalgo (rubenperez038 at gmail dot com)
   
    Distributed under the Boost Software License, Version 1.0. (See accompanying
    file LICENSE_1_0.txt or copy at http://www.boost.org/LICENSE_1_0.txt)
]

[section:prepared_statements Prepared statements]

[import ../../example/prepared_statements.cpp]

This section covers using [mysqllink sql-prepared-statements.html
server-side prepared statements]. The functionality is broadly
similar to the `PREPARE`, `EXECUTE` and `DEALLOCATE`
SQL commands. However, note that the functions and classes
here described are [*not based on SQL query composition],
but rather use of dedicated protocol functionality
(sometimes called the binary protocol).
This makes using this API preferable to using query composition
in terms of security and efficiency.

The rest of this section contains a detailed explanation of
prepared statement mechanics, together with some code
snippets. You can find the full code listing
[link mysql.examples.prepared_statements here].

[heading Preparing a statement]

To prepare a statement, call [refmem connection prepare_statement]
or [refmem connection async_prepare_statement]. You must pass in
a string containing the text of the SQL statement (similar
to how [link mysql.queries text queries] work). These functions
return a [reflink prepared_statement] object.

In addition to regular SQL, you can also use 
question mark characters (`?`) to represent parameters 
(as described [mysqllink prepare.html here]).
When you execute the statement (next section), you
provide values for each of the parameters you declared.
You don't need to escape or sanitize these values anyhow,
thus avoiding the possibility of SQL injection attacks.

The following prepares a statement with one
parameter (`conn` is a [reflink tcp_connection]):

[prepared_statements_prepare]

[include helpers/query_strings_encoding.qbk]

[heading Executing a statement]

To execute a statement, use the [refmem prepared_statement execute]
or [refmem prepared_statement async_execute] function family.
Executing a statement yields a [reflink resultset].

When executing a statement, you must pass in [*exactly as many parameters
as the statement has]. Failing to do so will result in an error.
Parameters are passed in as [reflink2 value boost::mysql::value] objects,
and in the same order as they appear in the statement text.
Values should be in the MySQL range of validity. In particular,
[reflink date]s, [reflink datetime]s and [reflink time]s should
be in their validity range; otherwise the results are undefined.

There are two different signatures for execute functions:

* One accepting an [reflink execute_params] object, which
  represents a range of forward iterators pointing to [reflink value]s.
  You can use [reflink2 execute_params.make_execute_params make_execute_params] to create [reflink execute_params]
  objects easier.
* Another accepting a collection such that `std::begin()` and `std::end()`
  yield forward iterators pointing to [reflink value]s. This is syntactic
  sugar over the former.

You may use the [reflink2 value.make_values make_values] function
to create a `std::array` of [reflink value]s suitable for
the container version, or the [reflink no_statement_params] variable
if your statement has no parameters.

The following executes the statement we prepared in the previous
section, binding the `first_name` parameter to `"Efficient"`:

[prepared_statements_execute]

You can execute a statement as many times as you want.
However, recall that once you obtain a [reflink resultset],
[*you must read it completely before engaging in any other
network operation] (e.g. executing the statement again).
See [link mysql.resultsets.complete this section] for more
information on resultsets.

[heading Closing a statement]

Prepared statements are created in the server side, and
thus consume server resources. Once you don't need a 
[reflink prepared_statement] anymore, you can call
[refmem prepared_statement close] or
[refmem prepared_statement async_close] to instruct
the server to deallocate it. You must not execute
a closed prepared statement. As a close operation involves
a network transfer, you should finish reading any incomplete
[reflink resultset] before starting it.

Prepared statements are managed by the server on a
per-connection basis. Once you close your connection
with the server, all prepared statements you have
created using this connection will be automatically
deallocated. This also means that you must keep
the [reflink connection] object alive and open to
use a [reflink prepared_statement] object.

If you are creating your prepared statements at the beginning
of your program and keeping them alive until the connection
is closed, then there is no need to call [refmem
prepared_statement close] or [refmem prepared_statement
async_close], as closing the connection will do the cleanup
for you. If you are creating and destroying prepared statements
dynamically, then it is advised to use [refmem
prepared_statement close] or [refmem prepared_statement
async_close] to prevent excessive resource usage in the server.

Finally, note that [reflink prepared_statement]'s destructor
does not perform any server-side deallocation of the statement.
This is because closing a statement involves a network
operation that may block your code or fail.

[endsect]