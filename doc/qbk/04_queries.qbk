[/
    Copyright (c) 2019-2022 Ruben Perez Hidalgo (rubenperez038 at gmail dot com)
   
    Distributed under the Boost Software License, Version 1.0. (See accompanying
    file LICENSE_1_0.txt or copy at http://www.boost.org/LICENSE_1_0.txt)
]

[section:queries Text queries]

Text queries are started by calling the [refmem connection query]
and [refmem connection async_query] functions. They accept
a SQL query string as parameter, which will be executed in the server.
They return a [reflink resultset] with the query results.

Almost any query that may be issued in the `mysql` command line
can be executed using this method. This includes `SELECT`s,
`UPDATE`s, `INSERT`s, `DELETE`s, `CREATE TABLE`s...
In particular, you may start transactions issuing a `START TRANSACTION`,
commit them using `COMMIT` and rolling them back using `ROLLBACK`.
You can also access the prepared statement functionality by
issuing `PREPARE` and `EXECUTE` commands. However, it is
advised to use [link mysql.prepared_statements
the dedicated prepared statement functionality] 
in __Self__ for this task.

[heading Multi-function operation]

When you call [refmem connection query], you start a "multi-function" operation.
`query()` will send the query request to the server. The server then sends an initial response
and all the generated rows. `query()` will just read the initial response, and not the rows.

After a successful query, [*you must read all the generated rows] by calling any of the `read_xxx`
functions on `resultset`. If you start any other operation involving a read before doing this,
you will get undefined results.

[include helpers/query_strings_encoding.qbk]

[heading Limitations]

* You can only execute a single query at a time. Passing in several queries separated by semicolons
  won't work.
* At the moment, there is no equivalent to `mysql_real_escape_string_quote` (TODO: link) to compose valid
  text queries from user provided input in a safe way. Doing composition by hand can
  lead to SQL injection vulnerabilities. Please use [link mysql.prepared_statements prepared statements]
  instead, which perform composition server-side in a safe way. 

[heading Use cases]

You should generally prefer prepared statements over text queries. Text queries can be useful for simple,
non-parametrized queries:

* `"START TRANSACTION"`, `"COMMIT"` and `"ROLLBACK"` queries, for transactions.
* `"SET NAMES utf8mb4"` and similar, to set variables for encoding, time zones and similar configuration options.
* `"CREATE TABLE ..."` and similar DDL statements.

Avoid text queries involving user input.

[heading Examples]

* [link mysql.examples.query_sync Sync query].
* [link mysql.examples.query_async_callbacks Async query, with callbacks].
* [link mysql.examples.query_async_futures Async query, with futures].
* [link mysql.examples.query_async_coroutines Async query, with Boost.Coroutine coroutines].
* [link mysql.examples.query_async_coroutinescpp20 Async query, with C++20 coroutines].


[endsect]