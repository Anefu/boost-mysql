[/
    Copyright (c) 2019-2022 Ruben Perez Hidalgo (rubenperez038 at gmail dot com)
   
    Distributed under the Boost Software License, Version 1.0. (See accompanying
    file LICENSE_1_0.txt or copy at http://www.boost.org/LICENSE_1_0.txt)
]

[section:error_handling Error handling and available overloads]

This section describes the different error handling strategies
you may use with __Self__, as well as the different overloads
available for each function involving network transfers.

The different overloads differ in how they deal with errors.
Most of them use a strategy based on [reflink error_code]'s
(which is an alias for `boost::system::error_code`).
Additionally, some of them use the [reflink error_info]
class. This is used as a container for additional
information about the error, if available.
For example, if you issue a query using [refmem connection query]
and one of the referenced fields does not exist, the function
will fail. The [reflink error_code] will acknowledge this fact,
and the [reflink error_info] will contain information about which
field caused the problem.

[heading Synchronous functions]

There are two overloads for each synchronous network function:

* Synchronous with exceptions. These are the easier to use,
  and the ones employed in the [link mysql.tutorial tutorial].
  When they fail, they throw a `boost::system::system_error`
  exception, which contains an `error_code` and a diagnostic
  message.
* Synchronous with [reflink error_code] and [reflink error_info].
  These functions output an [reflink error_code] and an [reflink error_info]
  by lvalue reference when they fail.
  
[heading Asynchronous functions]

The associated handler signature of all asynchronous functions
has one of the following two forms:

* `void(error_code)`. Used in operations that do
  not have a proper result, e.g. [refmem connection async_connect].
* `void(error_code, T)`. Used in operations that
  have a result, e.g. [refmem connection async_query].
  
When asynchronous operations fail, they communicate it
by calling the handler with a non-zero [reflink error_code].

If you are interested in also obtaining an [reflink error_info]
when using asynchronous functions, there is an extra overload
of each asynchronous function taking an additional output lvalue reference
[reflink error_info] parameter. This parameter is set before
calling the handler.

[heading Server-side and client-side error codes]

__Self__ [reflink error_code]s use [reflink errc] as the
underlying error enumeration. This enum combines codes from
two different origins:

* [*Server defined] error codes. These codes are defined by the MySQL
  server. They range between 1 and 0xffff. They are described
  in detail [mysqlerrlink in the MySQL error reference].
* [*Client defined] error codes. These are defined by __Self__,
  and are always greater than 0xffff.
  
[note
    No validation is in place to guarantee that the error
    codes sent by the server are the ones defined in [reflink errc].
    The server may define additional error codes, and that should
    not make operations fail. 
]
  
[endsect]