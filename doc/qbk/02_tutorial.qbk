[/
    Copyright (c) 2019-2022 Ruben Perez Hidalgo (rubenperez038 at gmail dot com)
   
    Distributed under the Boost Software License, Version 1.0. (See accompanying
    file LICENSE_1_0.txt or copy at http://www.boost.org/LICENSE_1_0.txt)
]

[section:tutorial Tutorial]

[import ../../example/tutorial.cpp]

Welcome to Boost.Mysql's tutorial. We will go through the simplest
possible piece of code using Boost.Mysql: a program that connects
to the MySQL server and issues the query `SELECT "Hello World!"`.

This tutorial assumes you have a running MySQL server listening
in localhost on port 3306 (the default one). You should have
the credentials of a valid MySQL user (username and password).
No further setup is needed.

This tutorial assumes you have a basic familiarity with __Asio__
(e.g. you know what a [asioreflink io_context io_context] is).

You can find the full source code for this tutorial [link mysql.tutorial.listing here].

[heading Connection object]

The first step is to create a connection object, which 
represents a single connection over TCP to the MySQL server.
We will be using [reflink tcp_ssl_connection], which supports TLS.
If you're using the latest MySQL version with its default configuration,
you will need to use TLS to successfully establish a connection.

A [reflink tcp_ssl_connection] is an I/O object. It can be constructed from a
[asioreflink io_context/executor_type io_context::executor_type] and a
[asioreflink ssl__context ssl::context]:

[tutorial_connection]

[heading Connecting to the server]

The next step is to connect to the server. We will use the function
[reflink2 connection.connect tcp_ssl_connection::connect],
which accepts two parameters:

* The first one specifies the network address of the MySQL server.
  As we are using TCP, this is a [asioreflink ip__tcp/endpoint ip::tcp::endpoint],
  identifying the host and port to connect to.
* The second one is a collection of MySQL handshake parameters, including
  username and password. The parameter must be an instance of
  [reflink handshake_params]. You may also set other options like
  the database name to use by default or whether to use SSL or not.
  
[tutorial_connect]

[note
    Read-only strings, like the ones used in [reflink handshake_params]'s
    constructor, are represented as `boost::string_view`s, which are similar
    to `std::string_view`s but do not require C++17 to work.
]

[heading Issuing the SQL query]

The next step is to issue the query to the server. We will use
[reflink2 connection.query tcp_ssl_connection::query],
which accepts a string containing a single SQL query and instructs
the server to run it. It returns a [reflink tcp_ssl_resultset] 
object, which allows to read the query results:

[tutorial_query]

[heading Reading the results]

A [reflink resultset] is an object that represents the result of a query.
Resultsets are not containers, but I/O objects:
they do not contain by themselves the entire result of the query, but allow
the user to read it using several methods. We will use
[reflink2 resultset.read_all tcp_ssl_resultset::read_all], which
reads all the rows in the resultset and places them in a [reflink rows]
object:

[tutorial_read]

A [reflink rows] object is a matrix-like container of MySQL fields.
Each field is represented as a [reflink field_view], a variant-like class that
can hold any type allowed in MySQL.

[tutorial_fields]

The operation `all_rows.at(0)` returns the first row from the `all_rows`
container. From that row, we select the first field using `.at(0)` again.
We finally stream the returned `field_view`
to `std::cout`, which prints the expected phrase to the console.

[heading Closing the connection]

Once we are done with the connection, we close it by calling
[reflink2 connection.close tcp_ssl_connection::close]. Note that
this will send a final quit packet to the MySQL server to notify
we are closing the connection, and thus may fail.

[tutorial_close]

[heading Final notes]

This concludes our __Self__ tutorial! You can now learn more about the
core concepts of this library in the [link mysql.concepts concepts section].
You can also look at more complex [link mysql.examples examples].

[heading:listing Full listing]

Here is the full source code for the above steps:

[tutorial_listing]

[endsect]