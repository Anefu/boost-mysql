[/
    Copyright (c) 2019-2022 Ruben Perez Hidalgo (rubenperez038 at gmail dot com)
   
    Distributed under the Boost Software License, Version 1.0. (See accompanying
    file LICENSE_1_0.txt or copy at http://www.boost.org/LICENSE_1_0.txt)
]


[section:types MySQL to C++ mapping reference]

The following lists the mapping from database
types to C++ types, together with the ranges and specific considerations
for each one.

* Integral types:
  * __TINYINT__. 1 byte integer type. If it is signed, it is represented
    as a `std::int64_t`, and its range is between `-0x80` and `0x7f`.
    If unsigned, represented as a `std::uint64_t`, and its range is
    between `0` and `0xff`.
  * __SMALLINT__. 2 byte integer type. If it is signed, it is represented
    as a `std::int64_t`, and its range is between `-0x8000` and `0x7fff`.
    If unsigned, represented as a `std::uint64_t`, and its range is
    between `0` and `0xffff`.
  * __MEDIUMINT__. 3 byte integer type. If it is signed, it is represented
    as a `std::int64_t`, and its range is between `-0x800000` and `0x7fffff`.
    If unsigned, represented as a `std::uint64_t`, and its range is
    between `0` and `0xffffff`.
  * __INT__. 4 byte integer type. If it is signed, it is represented
    as a `std::int64_t`, and its range is between `-0x80000000` and `0x7fffffff`.
    If unsigned, represented as a `std::uint64_t`, and its range is
    between `0` and `0xffffffff`.
  * __BIGINT__. 8 byte integer type. If it is signed, it is represented
    as a `std::int64_t`, and its range is between `-0x8000000000000000` and
    `0x7fffffffffffffff`. If unsigned, represented as a `std::uint64_t`,
    and its range is between `0` and `0xffffffffffffffff`.
  * __YEAR__. 1 byte integer type used to represent years. Its range is
    \[`1901`, `2155`\], plus zero. Zero is often employed to represent
    invalid year values. We represent zero year here as a numeric 0.
    YEAR is represented as a `std::uint64_t`.
  * __BIT__. A bitset between 1 and 64 bits wide. Represented here as
    a `std::uint64_t` ranging between `0` and `0xffffffffffffffff`.
* Floating point types:
  * __FLOAT__. 4 byte floating point type. Represented as `float`.
  * __DOUBLE__. 8 byte floating point type. Represented as `double`.
* Date and time types:
  * __DATE__. Represented as a boost::mysql::date. All dates retrieved from
    the database are guaranteed to be in the range 
    \[[reflink min_date], [reflink max_date]\]. 
    Note that these limits are slightly more flexible than the official __DATE__ limits.

    If the __allow_invalid_dates__ __sql_mode__ is set, MySQL will accept
    invalid dates, like `"2010-02-31"`. Furthermore, if __strict_sql__
    is not enabled, MySQL will accept zero dates, like `"0000-00-00"`, and
    dates with zero components, like `"2010-00-20"`. These dates are invalid
    and not representable as a [reflink date]. In this library, they are
    all represented as NULL values, instead. These values
    can be retrieved from the database in both text queries and prepared
    statements, but cannot be specified as parameters of prepared statements.
  * __DATETIME__. MySQL representation of a time point without time zone,
    with a resolution of one microsecond.
    Represented as a [reflink datetime]. All datetimes retrieved from
    the database are guaranteed to be in the range \[[reflink min_datetime],
    [reflink max_datetime]\].

    If __allow_invalid_dates__ __sql_mode__ is set, MySQL will accept
    datetimes with invalid dates, like `"2010-02-31 10:10:10"`.
    Furthermore, if __strict_sql__ is not enabled, MySQL will accept
    zero datetimes, like `"0000-00-00 00:00:00"`, and
    datetimes with zero date components, like `"2010-00-20 00:00:00"`.
    These datetimes are invalid because they do not represent any real time point,
    and are thus not representable as a [reflink datetime]. In this library, they are
    all represented as NULL values, instead. These values
    can be retrieved from the database in both text queries and prepared
    statements, but cannot be specified as parameters of prepared statements.
  * __TIMESTAMP__. Like __DATETIME__, it also represents a time point. When inserted,
    __TIMESTAMP__'s are interpreted as local times, according to the __time_zone__ variable,
    and converted to UTC for storage. When retrieved, they are converted back
    to the time zone indicated by __time_zone__. The retrieved value of a __TIMESTAMP__
    field is thus a time point in some local time zone, dictated by the current
    __time_zone__ variable. As this variable can be changed programmatically, without
    the client knowing it, we represent __TIMESTAMP__ s without their time zone,
    using [reflink datetime]. __TIMESTAMP__'s range is narrower than __DATETIME__'s,
    but we do not enforce it in the client.

    If __strict_sql__ is not enabled, MySQL accepts zero `TIMESTAMPs`, like
    `"0000-00-00 00:00:00"`. These timestamps are invalid because
    they do not represent any real time point, and are thus not representable
    as a [reflink datetime]. In this library, they are
    all represented as NULL values, instead. These values
    can be retrieved from the database in both text queries and prepared
    statements, but cannot be specified as parameters of prepared statements.

  * __TIME__. A signed time duration, with a resolution of one microsecond.
    Represented as a [reflink time] (alias for `std::chrono::microseconds`).
    Guaranteed to be in range \[[reflink min_time], [reflink max_time]\].
* String types. All text, character and blob types are represented as a
  `boost::string_view`. Furthermore, any type without a more specialized representation
  is exposed as a `boost::string_view`. Character strings are [*NOT] aware of encoding -
  they are represented as the string raw bytes. The encoding for each character
  string column is part of the column metadata, and can be accessed using
  [refmem metadata column_collation].

  The following types are represented as strings in Boost.Mysql:
    * __CHAR__. Fixed-size character string.
    * __BINARY__. Fixed-size blob.
    * __VARCHAR__. Variable size character string with a maximum size.
    * __VARBINARY__. Variable size blob with a maximum size.
    * __TEXT__ (all sizes). Variable size character string.
    * __BLOB__ (all sizes). Variable size blob.
    * __ENUM__. Character string with a fixed set of possible values (only one possible).
    * __SET__. Character string with a fixed set of possible values (many possible).

  The following types are not strings per se, but are represented as such because
  no better representation for them is available at the moment:
    * __DECIMAL__ and __NUMERIC__ (equivalent). 
      A fixed precision numeric value. In this case, the string will contain
      the textual representation of the number (e.g. the string `"20.52"` for `20.52`).
    * __GEOMETRY__. In this case, the string will contain
      the binary representation of the geometry type.
      
  [warning
      String values do [*not] own the memory they point to. This is
      [/ done for efficiency reasons. See [link mysql.values.strings this section] ]
      for more info.
  ]

[endsect]