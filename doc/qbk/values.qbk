[/
    Copyright (c) 2019-2020 Ruben Perez Hidalgo (rubenperez038 at gmail dot com)
   
    Distributed under the Boost Software License, Version 1.0. (See accompanying
    file LICENSE_1_0.txt or copy at http://www.boost.org/LICENSE_1_0.txt)
]

[section:values MySQL values]
[nochunk]

[import ../../example/value.cpp]

This section describes the [reflink2 value boost::mysql::value] class, presents
several examples and discusses some topics regarding its usage.

A [reflink value] is a variant-like type. At a given time,
it always holds a value of one of the type alternatives.
See [refmem value variant_type] for the list of all
possible type alternatives. A value can be converted to an
actual variant using [refmem value to_variant]. 
[@boost:/libs/variant2/doc/html/variant2.html Boost.Variant2]
is used to represent values as variants.

[heading MySQL types in C++]

MySQL supports a wide variety of types. There is no one-to-one mapping
between MySQL types and C++ types, as this would make 
[refmem value variant_type] have a lot of options,
adding unnecessary complexity and overhead.

The mappings are intended to be lossless and intuitive.
For more information about the type mappings, see [link mysql.types this section].

[heading NULL values]

NULL values are represented as a [reflink value] containing `nullptr`,
of type `std::nullptr_t`. You can test if a value is NULL using
[refmem value is_null]

[heading Accessing the underlying value]

You can access the actual typed value of a `boost::mysql::value` using
one of the following accessors. All these methods are function
templates, where the only template parameter `T` is the type you
want to cast the value to. They differ in how they behave when the
underlying value cannot be converted to `T`:

* [refmem value get]: returns a `T`, throws an exception if not convertible.
* [refmem value get_optional]: returns a __boost_optional__,
  empty if not convertible.
* [refmem value get_std_optional]: same as [refmem value get_optional], but
  using C++17 `std::optional`.
  
Example of [refmem value get]:

[value_example_get]

Example of [refmem value get_optional]:

[value_example_get_optional]

Example of [refmem value get_std_optional] (requires C++17):

[value_example_get_std_optional]

[note
    When calling these functions, unless otherwise noted,
    `T` must be one of the types in [refmem value variant_type].
]

[section:conversions Conversions]

In general, when calling accessor functions, the passed in `T` type
must match exactly the type alternative the value holds (e.g. if
the value contains a `double`, trying to retrieve a `std::uint64_t`
will fail).

However, there are certain cases where this behavior does not
make sense, and an automatic conversion will happen evein if `T`
does not exactly match the stored type:

* If the stored type is `std::uint64_t`, the requested type (`T`)
  is `std::int64_t`, and the value is within the range
  of a `std::int64_t`, it will be converted to this type.
* If the stored type is `std::int64_t`, the requested type (`T`)
  is `std::uint64_t`, and the value is within the range
  of a `std::uint64_t`, it will be converted to this type.
* If the stored type is `float`, and the requested type
  is `double`, it will be converted.
  
The motivation behind this conversions is: given the SQL query
`"SELECT COUNT(*) AS cnt FROM my_table"`, which should be `T`
for a [reflink value] representing the `cnt` column?
Is it `std::int64_t` or `std::uint64_t`? The answer is that
it actually depends on how the database represents `cnt`.
This information is transmitted to the client, but is not
obvious to the user.

Example:

[value_example_get_conversions]

[endsect]

[heading Querying the stored type]

You may query if a [reflink value] has stored type `T` using one of
[refmem value is] and [refmem value is_convertible_to]. The difference
between the two is that the later will consider the above
[link mysql.values.conversions conversions], while the former won't:

[value_example_is]

[warning
    Use the above functions when you don't need the underlying value.
    The following pattern is inefficient, please avoid it:
]

[value_example_inefficient]

Instead, prefer the following:

[value_example_inefficient_ok]

[section:strings A note on string values]

[warning
    String types are represented as `boost::string_view`s, as detailed
    [link mysql.types here]. This is a non-owning, lightweight
    string type, that points to an externally owned piece of memory.
    This makes the [reflink value] class [*non-owning] in the case of strings.
]

In __Self__, the memory pointed to by string [reflink value]s
is owned by either [reflink resultset] or [reflink owning_row]
objects. This avoids unnecessary copies and makes the [reflink value]
class lightweight and cheap to copy. In exchange, you must pay attention
to the lifetime of the [reflink resultset] or [reflink owning_row]
object you used to obtain the [reflink value] to not incur in
undefined behavior. For more information on resultset mechanics,
see [link mysql.resultsets this section].

[endsect]

[heading Other operations]

Values may be streamed and compared for equality. If you need
to `visit()` a [reflink value], use [refmem value to_variant]
and use `visit()` on the returned variant. Additionally,
[reflink row] and [reflink owning_row] objects may also
be streamed and compared for equality.

[endsect]
